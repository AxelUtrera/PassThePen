using Microsoft.VisualStudio.TestTools.UnitTesting;
using Logic;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Domain;
using System.Data.Entity.Infrastructure;

namespace Logic.Tests
{
    [TestClass()]
    public class PlayerLogicTests
    {
        [TestMethod()]
        public void Test01_AddPlayer_AddNewPlayer_ReturnValidCode()
        {
            Player newPlayerTest = new Player
            {
                username = "usertest",
                password = "passwordtest",
                name = "Test",
                lastname = "Test",
                email = "test@test.com",
            };

            PlayerLogic playerLogic = new PlayerLogic();
            int expected = 200;
            int result = playerLogic.AddPlayer(newPlayerTest);

            Assert.AreEqual(expected, result);
        }


        [TestMethod()]
        public void Test04_AutenticatePlayer_LoginPlayer_ReturnValidCode()
        {
            Player testPlayer = new Player
            {
                username = "usertest",
                password = "passwordtest"
            };
            PlayerLogic playerLogic = new PlayerLogic();

            int expected = 200;
            int result = playerLogic.AutenticatePlayer(testPlayer);

            Assert.AreEqual(expected, result);
        }

        [TestMethod()]
        public void Test05_AutenticatePlayer_LoginPlayer_ReturnInvalidCode()
        {
            Player testPlayer = new Player
            {
                username = "usertest",
                password = "passwordtes"
            };
            PlayerLogic playerLogic = new PlayerLogic();

            int expected = 500;
            int result = playerLogic.AutenticatePlayer(testPlayer);

            Assert.AreEqual(expected, result);
        }


        [TestMethod()]
        public void Test06_AutenticateEmail_AutenticateExistentEmail_ReturnValidCode()
        {
            PlayerLogic playerLogic = new PlayerLogic();

            int expected = 200;
            int result = playerLogic.AutenticateEmail("test@test.com");

            Assert.AreEqual(expected, result);
        }


        [TestMethod()]
        public void Test07_AutenticateEmail_AutenticateNonExistentEmail_ReturnValidCode()
        {
            PlayerLogic playerLogic = new PlayerLogic();

            int expected = 500;
            int result = playerLogic.AutenticateEmail("inexistentemail@email.com");

            Assert.AreEqual(expected, result);
        }

        [TestMethod()]
        public void Test08_FindPlayer_FindExistentPlayer_ReturnValidCode()
        {
            PlayerLogic playerLogic = new PlayerLogic();

            int expected = 200;
            int result = playerLogic.FindPlayer("usertest");

            Assert.AreEqual(expected, result);
        }


        [TestMethod()]
        public void Test09_FindPlayer_FindNonExistentPlayer_ReturnValidCode()
        {
            PlayerLogic playerLogic = new PlayerLogic();

            int expected = 500;
            int result = playerLogic.FindPlayer("NonExistentPlayer");

            Assert.AreEqual(expected, result);
        }

        [TestMethod()]
        public void Test10_ObtainDataPlayer_ObtainExistentPlayerData_ReturnPlayerData()
        {
            Player expectedPlayer = new Player
            {
                username = "usertest",
                name = "Test",
                lastname = "Test",
                email = "test@test.com"
            };

            PlayerLogic playerLogic = new PlayerLogic();
            Player resultPlayer = playerLogic.ObtainPlayerData("usertest");

            Assert.AreEqual(expectedPlayer, resultPlayer);
        }

        [TestMethod()]
        public void Test11_ObtainDataPlayer_ObtainNonExistentPlayerData_ReturnValidCode()
        {
            PlayerLogic playerLogic = new PlayerLogic();
            Player resultPlayer = playerLogic.ObtainPlayerData("NonExistent");

            Assert.IsNull(resultPlayer);
        }

        [TestMethod()]
        public void Test12_RecoverFriend_ObtainPlayerFriends_ReturnEmptyList()
        {
            PlayerLogic playerLogic = new PlayerLogic();
            List<Friends> testFriends = playerLogic.RecoverFriends("usertest");

            Assert.IsTrue(testFriends.Count == 0);
        }

        [TestMethod()]
        public void Test13_AddGuestFriend_AddTestFriend_ReturnValidCode()
        {
            PlayerLogic playerLogic = new PlayerLogic();
            int expected = 200;
            int result = playerLogic.AddGuestFriend("usertest");

            Assert.AreEqual(expected, result);
        }


        [TestMethod()]
        public void Test14_RecoverFriend_ObtainPlayerFriends_ReturnValidList()
        {
            PlayerLogic playerLogic = new PlayerLogic();
            List<Friends> testFriends = playerLogic.RecoverFriends("Guest");

            Assert.IsTrue(testFriends.Count > 0);
        }


        [TestMethod()]
        public void Test15_UpdatePassword_UpdatePasswordCorrect_ReturnValidCode()
        {
            PlayerLogic playerLogic = new PlayerLogic();
            int expected = 200;
            int result = playerLogic.UpdatePassword("usertest", "newPassword");

            Assert.AreEqual(expected, result);
        }


        [TestMethod()]
        public void Test16_UpdatePassword_UpdatePasswordCorrect_ReturnInvalidCode()
        {
            PlayerLogic playerLogic = new PlayerLogic();
            int expected = 500;
            int result = playerLogic.UpdatePassword("usertest", "newPassword");

            Assert.AreEqual(expected, result);
        }


        [TestMethod()]
        [ExpectedException(typeof(InvalidOperationException))]
        public void Test16_UpdatePassword_UpdatePasswordNonExistenPlayer_ReturnException()
        {
            PlayerLogic playerLogic = new PlayerLogic();
            playerLogic.UpdatePassword("nonExisten", "newPassword");
        }


        [TestMethod()]
        public void Test18_UpdatePasswordEmail_UpdatePasswordCorrect_ReturnValidCode()
        {
            PlayerLogic playerLogic = new PlayerLogic();
            int expected = 200;
            int result = playerLogic.UpdatePasswordEmail("test@test.com", "newPasswordUpdated");

            Assert.AreEqual(expected, result);
        }


        [TestMethod()]
        public void Test19_UpdatePasswordEmail_UpdatePasswordCorrect_ReturnInvalidCode()
        {
            PlayerLogic playerLogic = new PlayerLogic();
            int expected = 500;
            int result = playerLogic.UpdatePasswordEmail("test@test.com", "newPasswordUpdated");

            Assert.AreEqual(expected, result);
        }


        [TestMethod()]
        [ExpectedException(typeof(InvalidOperationException))]
        public void Test20_UpdatePasswordEmail_UpdatePasswordNonExistentEmail_ReturnException()
        {
            PlayerLogic playerLogic = new PlayerLogic();
            playerLogic.UpdatePasswordEmail("nonExistent@email.com", "newPassword");
        }


        [TestMethod()]
        public void Test21_UpdateDataPlayer_UpdateExistentPlayer_ReturnValidCode()
        {
            Player newPlayerTest = new Player
            {
                password = "passwordupdated",
                name = "TestUpdated",
                lastname = "TestUpdated",
                email = "TestUpdated"
            };
            string playerToUpdate = "usertest";

            PlayerLogic playerLogic = new PlayerLogic();
            int expected = 200;
            int result = playerLogic.UpdateDataPlayer(playerToUpdate, newPlayerTest);

            Assert.AreEqual(expected, result);
        }


        [TestMethod()]
        public void Test22_UpdateDataPlayer_UpdateExistentPlayer_ReturnInvalidCode()
        {
            Player newPlayerTest = new Player
            {
                password = "passwordupdated",
                name = "TestUpdated",
                lastname = "TestUpdated",
                email = "TestUpdated"
            };
            string playerToUpdate = "usertest";

            PlayerLogic playerLogic = new PlayerLogic();
            int expected = 500;
            int result = playerLogic.UpdateDataPlayer(playerToUpdate, newPlayerTest);

            Assert.AreEqual(expected, result);
        }

        [TestMethod()]
        [ExpectedException(typeof(InvalidOperationException))]
        public void Test23_UpdateDataPlayer_UpdateNonExistentPlayer_ReturnException()
        {
            Player newPlayerTest = new Player
            {
                password = "passwordupdated",
                name = "TestUpdated",
                lastname = "TestUpdated",
                email = "TestUpdated"
            };
            string playerToUpdate = "NonExistent";

            PlayerLogic playerLogic = new PlayerLogic();
            playerLogic.UpdateDataPlayer(playerToUpdate, newPlayerTest);
        }

        [TestMethod()]
        public void Test24_DeleteFriend_DeleteFriendCorrect_ReturnValidCode()
        {
            Friends testFriend = new Friends
            {
                username = "usertest",
                friendUsername = "Guest"
            };

            PlayerLogic playerLogic = new PlayerLogic();
            int expected = 200;
            int result = playerLogic.DeleteFriend(testFriend);

            Assert.AreEqual(expected, result);
        }

        [TestMethod()]
        public void Test25_DeleteFriend_DeleteFriendCorrect_ReturnInvalidCode()
        {
            Friends testFriend = new Friends
            {
                username = "usertest",
                friendUsername = "Guest"
            };

            PlayerLogic playerLogic = new PlayerLogic();
            int expected = 500;
            int result = playerLogic.DeleteFriend(testFriend);

            Assert.AreEqual(expected, result);
        }
    }
}