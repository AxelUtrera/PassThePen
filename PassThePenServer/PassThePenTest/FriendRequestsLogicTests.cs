using Microsoft.VisualStudio.TestTools.UnitTesting;
using Logic;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Domain;

namespace Logic.Tests
{
    [TestClass()]
    public class FriendRequestsLogicTests
    {

        [TestMethod()]
        public void Test01_SendFriendRequest_SendExistentRequest_ReturnValidCode()
        {
            FriendRequest request = new FriendRequest
            {
                usernamePlayer = "usertest",
                friendUsername = "usertest2",
            };
            FriendRequestsLogic friendRequestsLogic = new FriendRequestsLogic();
            int expected = 500;
            int result = friendRequestsLogic.SendFriendRequests(request);

            Assert.AreEqual(expected, result);
        }

        [TestMethod()]
        public void Test02_GetFriendsRequestOfPlayer_ObtainFriendRequests_ReturnNotEmptyList()
        {
            FriendRequestsLogic friendRequestsLogic= new FriendRequestsLogic();
            List<FriendRequest> list = friendRequestsLogic.GetFriendRequestsOfPlayer("usertest");
            Assert.IsTrue(list.Count > 0);
        }

        

        [TestMethod()]
        public void Test03_DeleteFriendRequest_DeleteRequest_ReturnValidCode()
        {
            FriendRequestsLogic friendRequestsLogic = new FriendRequestsLogic();
            List<FriendRequest> list = friendRequestsLogic.GetFriendRequestsOfPlayer("usertest");

            int expected = 200;
            int result = friendRequestsLogic.DeleteFriendRequest(list.First());

            Assert.AreEqual(expected, result);
        }
        
        
        [TestMethod()]
        public void Test04_DeleteFriendRequest_DeleteRequest_ReturnInvalidCode()
        {
            FriendRequestsLogic friendRequestsLogic = new FriendRequestsLogic();
            FriendRequest request = new FriendRequest
            {
                idRequest = 1
            };

            int expected = 500;
            int result = friendRequestsLogic.DeleteFriendRequest(request);

            Assert.AreEqual(expected, result);
        }


        [TestMethod()]
        public void Test05_GetFriendsRequestOfPlayer_ObtainFriendRequests_ReturnEmptyList()
        {
            FriendRequestsLogic friendRequestsLogic = new FriendRequestsLogic();
            List<FriendRequest> list = friendRequestsLogic.GetFriendRequestsOfPlayer("usertest");
            Assert.IsTrue(list.Count == 0);
        }

        [TestMethod()]
        public void Test06_SendFriendRequest_SendCorrectRequest_ReturnValidCode()
        {
            FriendRequest request = new FriendRequest
            {
                usernamePlayer = "usertest",
                friendUsername = "usertest2",
            };
            FriendRequestsLogic friendRequestsLogic = new FriendRequestsLogic();
            int expected = 200;
            int result = friendRequestsLogic.SendFriendRequests(request);

            Assert.AreEqual(expected, result);
        }

        [TestMethod()]
        public void Test07_AcceptFriendRequest_AcceptRequest_ReturnValidCode()
        {
            FriendRequestsLogic friendRequestsLogic = new FriendRequestsLogic();
            List<FriendRequest> list = friendRequestsLogic.GetFriendRequestsOfPlayer("usertest");

            int expected = 200;
            int result = friendRequestsLogic.AcceptFriendRequest(list.First());

            Assert.AreEqual(expected, result);
        }
    }
}