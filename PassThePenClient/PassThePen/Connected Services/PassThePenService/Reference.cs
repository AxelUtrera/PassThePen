//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PassThePen.PassThePenService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/Domain")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lastnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] profileImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lastname {
            get {
                return this.lastnameField;
            }
            set {
                if ((object.ReferenceEquals(this.lastnameField, value) != true)) {
                    this.lastnameField = value;
                    this.RaisePropertyChanged("lastname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] profileImage {
            get {
                return this.profileImageField;
            }
            set {
                if ((object.ReferenceEquals(this.profileImageField, value) != true)) {
                    this.profileImageField = value;
                    this.RaisePropertyChanged("profileImage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Friends", Namespace="http://schemas.datacontract.org/2004/07/Domain")]
    [System.SerializableAttribute()]
    public partial class Friends : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string friendUsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idPlayerFriendsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool statusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string friendUsername {
            get {
                return this.friendUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.friendUsernameField, value) != true)) {
                    this.friendUsernameField = value;
                    this.RaisePropertyChanged("friendUsername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int idPlayerFriends {
            get {
                return this.idPlayerFriendsField;
            }
            set {
                if ((this.idPlayerFriendsField.Equals(value) != true)) {
                    this.idPlayerFriendsField = value;
                    this.RaisePropertyChanged("idPlayerFriends");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool status {
            get {
                return this.statusField;
            }
            set {
                if ((this.statusField.Equals(value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendRequest", Namespace="http://schemas.datacontract.org/2004/07/Domain")]
    [System.SerializableAttribute()]
    public partial class FriendRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string friendUsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idRequestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string statusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernamePlayerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string friendUsername {
            get {
                return this.friendUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.friendUsernameField, value) != true)) {
                    this.friendUsernameField = value;
                    this.RaisePropertyChanged("friendUsername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int idRequest {
            get {
                return this.idRequestField;
            }
            set {
                if ((this.idRequestField.Equals(value) != true)) {
                    this.idRequestField = value;
                    this.RaisePropertyChanged("idRequest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string status {
            get {
                return this.statusField;
            }
            set {
                if ((object.ReferenceEquals(this.statusField, value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string usernamePlayer {
            get {
                return this.usernamePlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.usernamePlayerField, value) != true)) {
                    this.usernamePlayerField = value;
                    this.RaisePropertyChanged("usernamePlayer");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PassThePenService.IPlayerManagement")]
    public interface IPlayerManagement {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagement/AddPlayer", ReplyAction="http://tempuri.org/IPlayerManagement/AddPlayerResponse")]
        int AddPlayer(PassThePen.PassThePenService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagement/AddPlayer", ReplyAction="http://tempuri.org/IPlayerManagement/AddPlayerResponse")]
        System.Threading.Tasks.Task<int> AddPlayerAsync(PassThePen.PassThePenService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagement/UpdateDataPlayer", ReplyAction="http://tempuri.org/IPlayerManagement/UpdateDataPlayerResponse")]
        int UpdateDataPlayer(string username, PassThePen.PassThePenService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagement/UpdateDataPlayer", ReplyAction="http://tempuri.org/IPlayerManagement/UpdateDataPlayerResponse")]
        System.Threading.Tasks.Task<int> UpdateDataPlayerAsync(string username, PassThePen.PassThePenService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagement/GetDataPlayer", ReplyAction="http://tempuri.org/IPlayerManagement/GetDataPlayerResponse")]
        PassThePen.PassThePenService.Player GetDataPlayer(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagement/GetDataPlayer", ReplyAction="http://tempuri.org/IPlayerManagement/GetDataPlayerResponse")]
        System.Threading.Tasks.Task<PassThePen.PassThePenService.Player> GetDataPlayerAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagement/UpdatePlayerPassword", ReplyAction="http://tempuri.org/IPlayerManagement/UpdatePlayerPasswordResponse")]
        int UpdatePlayerPassword(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagement/UpdatePlayerPassword", ReplyAction="http://tempuri.org/IPlayerManagement/UpdatePlayerPasswordResponse")]
        System.Threading.Tasks.Task<int> UpdatePlayerPasswordAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagement/UpdatePassword", ReplyAction="http://tempuri.org/IPlayerManagement/UpdatePasswordResponse")]
        int UpdatePassword(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagement/UpdatePassword", ReplyAction="http://tempuri.org/IPlayerManagement/UpdatePasswordResponse")]
        System.Threading.Tasks.Task<int> UpdatePasswordAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagement/GetFriends", ReplyAction="http://tempuri.org/IPlayerManagement/GetFriendsResponse")]
        void GetFriends(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagement/GetFriends", ReplyAction="http://tempuri.org/IPlayerManagement/GetFriendsResponse")]
        System.Threading.Tasks.Task GetFriendsAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagement/DeleteFriend", ReplyAction="http://tempuri.org/IPlayerManagement/DeleteFriendResponse")]
        int DeleteFriend(PassThePen.PassThePenService.Friends friendToDelete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManagement/DeleteFriend", ReplyAction="http://tempuri.org/IPlayerManagement/DeleteFriendResponse")]
        System.Threading.Tasks.Task<int> DeleteFriendAsync(PassThePen.PassThePenService.Friends friendToDelete);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerManagementChannel : PassThePen.PassThePenService.IPlayerManagement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerManagementClient : System.ServiceModel.ClientBase<PassThePen.PassThePenService.IPlayerManagement>, PassThePen.PassThePenService.IPlayerManagement {
        
        public PlayerManagementClient() {
        }
        
        public PlayerManagementClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlayerManagementClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddPlayer(PassThePen.PassThePenService.Player player) {
            return base.Channel.AddPlayer(player);
        }
        
        public System.Threading.Tasks.Task<int> AddPlayerAsync(PassThePen.PassThePenService.Player player) {
            return base.Channel.AddPlayerAsync(player);
        }
        
        public int UpdateDataPlayer(string username, PassThePen.PassThePenService.Player player) {
            return base.Channel.UpdateDataPlayer(username, player);
        }
        
        public System.Threading.Tasks.Task<int> UpdateDataPlayerAsync(string username, PassThePen.PassThePenService.Player player) {
            return base.Channel.UpdateDataPlayerAsync(username, player);
        }
        
        public PassThePen.PassThePenService.Player GetDataPlayer(string username) {
            return base.Channel.GetDataPlayer(username);
        }
        
        public System.Threading.Tasks.Task<PassThePen.PassThePenService.Player> GetDataPlayerAsync(string username) {
            return base.Channel.GetDataPlayerAsync(username);
        }
        
        public int UpdatePlayerPassword(string username, string password) {
            return base.Channel.UpdatePlayerPassword(username, password);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePlayerPasswordAsync(string username, string password) {
            return base.Channel.UpdatePlayerPasswordAsync(username, password);
        }
        
        public int UpdatePassword(string email, string password) {
            return base.Channel.UpdatePassword(email, password);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePasswordAsync(string email, string password) {
            return base.Channel.UpdatePasswordAsync(email, password);
        }
        
        public void GetFriends(string username) {
            base.Channel.GetFriends(username);
        }
        
        public System.Threading.Tasks.Task GetFriendsAsync(string username) {
            return base.Channel.GetFriendsAsync(username);
        }
        
        public int DeleteFriend(PassThePen.PassThePenService.Friends friendToDelete) {
            return base.Channel.DeleteFriend(friendToDelete);
        }
        
        public System.Threading.Tasks.Task<int> DeleteFriendAsync(PassThePen.PassThePenService.Friends friendToDelete) {
            return base.Channel.DeleteFriendAsync(friendToDelete);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PassThePenService.IAutentication")]
    public interface IAutentication {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAutentication/AutenticatePlayer", ReplyAction="http://tempuri.org/IAutentication/AutenticatePlayerResponse")]
        int AutenticatePlayer(PassThePen.PassThePenService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAutentication/AutenticatePlayer", ReplyAction="http://tempuri.org/IAutentication/AutenticatePlayerResponse")]
        System.Threading.Tasks.Task<int> AutenticatePlayerAsync(PassThePen.PassThePenService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAutentication/AutenticateEmail", ReplyAction="http://tempuri.org/IAutentication/AutenticateEmailResponse")]
        int AutenticateEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAutentication/AutenticateEmail", ReplyAction="http://tempuri.org/IAutentication/AutenticateEmailResponse")]
        System.Threading.Tasks.Task<int> AutenticateEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAutentication/CodeEmail", ReplyAction="http://tempuri.org/IAutentication/CodeEmailResponse")]
        int CodeEmail(string to, string affair, int validationCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAutentication/CodeEmail", ReplyAction="http://tempuri.org/IAutentication/CodeEmailResponse")]
        System.Threading.Tasks.Task<int> CodeEmailAsync(string to, string affair, int validationCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAutenticationChannel : PassThePen.PassThePenService.IAutentication, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutenticationClient : System.ServiceModel.ClientBase<PassThePen.PassThePenService.IAutentication>, PassThePen.PassThePenService.IAutentication {
        
        public AutenticationClient() {
        }
        
        public AutenticationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AutenticationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AutenticationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AutenticationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AutenticatePlayer(PassThePen.PassThePenService.Player player) {
            return base.Channel.AutenticatePlayer(player);
        }
        
        public System.Threading.Tasks.Task<int> AutenticatePlayerAsync(PassThePen.PassThePenService.Player player) {
            return base.Channel.AutenticatePlayerAsync(player);
        }
        
        public int AutenticateEmail(string email) {
            return base.Channel.AutenticateEmail(email);
        }
        
        public System.Threading.Tasks.Task<int> AutenticateEmailAsync(string email) {
            return base.Channel.AutenticateEmailAsync(email);
        }
        
        public int CodeEmail(string to, string affair, int validationCode) {
            return base.Channel.CodeEmail(to, affair, validationCode);
        }
        
        public System.Threading.Tasks.Task<int> CodeEmailAsync(string to, string affair, int validationCode) {
            return base.Channel.CodeEmailAsync(to, affair, validationCode);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PassThePenService.IFriendRequests")]
    public interface IFriendRequests {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequests/GetFriendRequestsList", ReplyAction="http://tempuri.org/IFriendRequests/GetFriendRequestsListResponse")]
        PassThePen.PassThePenService.FriendRequest[] GetFriendRequestsList(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequests/GetFriendRequestsList", ReplyAction="http://tempuri.org/IFriendRequests/GetFriendRequestsListResponse")]
        System.Threading.Tasks.Task<PassThePen.PassThePenService.FriendRequest[]> GetFriendRequestsListAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequests/SendFriendRequests", ReplyAction="http://tempuri.org/IFriendRequests/SendFriendRequestsResponse")]
        int SendFriendRequests(PassThePen.PassThePenService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequests/SendFriendRequests", ReplyAction="http://tempuri.org/IFriendRequests/SendFriendRequestsResponse")]
        System.Threading.Tasks.Task<int> SendFriendRequestsAsync(PassThePen.PassThePenService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequests/DeclineFriendRequests", ReplyAction="http://tempuri.org/IFriendRequests/DeclineFriendRequestsResponse")]
        int DeclineFriendRequests(PassThePen.PassThePenService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequests/DeclineFriendRequests", ReplyAction="http://tempuri.org/IFriendRequests/DeclineFriendRequestsResponse")]
        System.Threading.Tasks.Task<int> DeclineFriendRequestsAsync(PassThePen.PassThePenService.Player player);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendRequestsChannel : PassThePen.PassThePenService.IFriendRequests, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendRequestsClient : System.ServiceModel.ClientBase<PassThePen.PassThePenService.IFriendRequests>, PassThePen.PassThePenService.IFriendRequests {
        
        public FriendRequestsClient() {
        }
        
        public FriendRequestsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FriendRequestsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendRequestsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendRequestsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PassThePen.PassThePenService.FriendRequest[] GetFriendRequestsList(string username) {
            return base.Channel.GetFriendRequestsList(username);
        }
        
        public System.Threading.Tasks.Task<PassThePen.PassThePenService.FriendRequest[]> GetFriendRequestsListAsync(string username) {
            return base.Channel.GetFriendRequestsListAsync(username);
        }
        
        public int SendFriendRequests(PassThePen.PassThePenService.Player player) {
            return base.Channel.SendFriendRequests(player);
        }
        
        public System.Threading.Tasks.Task<int> SendFriendRequestsAsync(PassThePen.PassThePenService.Player player) {
            return base.Channel.SendFriendRequestsAsync(player);
        }
        
        public int DeclineFriendRequests(PassThePen.PassThePenService.Player player) {
            return base.Channel.DeclineFriendRequests(player);
        }
        
        public System.Threading.Tasks.Task<int> DeclineFriendRequestsAsync(PassThePen.PassThePenService.Player player) {
            return base.Channel.DeclineFriendRequestsAsync(player);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PassThePenService.IPlayerConexion", CallbackContract=typeof(PassThePen.PassThePenService.IPlayerConexionCallback))]
    public interface IPlayerConexion {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerConexion/Connect", ReplyAction="http://tempuri.org/IPlayerConexion/ConnectResponse")]
        void Connect(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerConexion/Connect", ReplyAction="http://tempuri.org/IPlayerConexion/ConnectResponse")]
        System.Threading.Tasks.Task ConnectAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerConexion/Disconnect", ReplyAction="http://tempuri.org/IPlayerConexion/DisconnectResponse")]
        void Disconnect(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerConexion/Disconnect", ReplyAction="http://tempuri.org/IPlayerConexion/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerConexion/RecoverPlayers", ReplyAction="http://tempuri.org/IPlayerConexion/RecoverPlayersResponse")]
        void RecoverPlayers(PassThePen.PassThePenService.Friends[] friends, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerConexion/RecoverPlayers", ReplyAction="http://tempuri.org/IPlayerConexion/RecoverPlayersResponse")]
        System.Threading.Tasks.Task RecoverPlayersAsync(PassThePen.PassThePenService.Friends[] friends, string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerConexionCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerConexion/PlayersCallBack")]
        void PlayersCallBack(PassThePen.PassThePenService.Friends[] friends);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerConexionChannel : PassThePen.PassThePenService.IPlayerConexion, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerConexionClient : System.ServiceModel.DuplexClientBase<PassThePen.PassThePenService.IPlayerConexion>, PassThePen.PassThePenService.IPlayerConexion {
        
        public PlayerConexionClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PlayerConexionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PlayerConexionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerConexionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerConexionClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Connect(string username) {
            base.Channel.Connect(username);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(string username) {
            return base.Channel.ConnectAsync(username);
        }
        
        public void Disconnect(string username) {
            base.Channel.Disconnect(username);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(string username) {
            return base.Channel.DisconnectAsync(username);
        }
        
        public void RecoverPlayers(PassThePen.PassThePenService.Friends[] friends, string username) {
            base.Channel.RecoverPlayers(friends, username);
        }
        
        public System.Threading.Tasks.Task RecoverPlayersAsync(PassThePen.PassThePenService.Friends[] friends, string username) {
            return base.Channel.RecoverPlayersAsync(friends, username);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PassThePenService.IMatchManagement", CallbackContract=typeof(PassThePen.PassThePenService.IMatchManagementCallback))]
    public interface IMatchManagement {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManagement/SendCard")]
        void SendCard(string card);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManagement/SendCard")]
        System.Threading.Tasks.Task SendCardAsync(string card);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManagement/SelectTurnTime")]
        void SelectTurnTime();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManagement/SelectTurnTime")]
        System.Threading.Tasks.Task SelectTurnTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManagement/StartTurnSignal")]
        void StartTurnSignal();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManagement/StartTurnSignal")]
        System.Threading.Tasks.Task StartTurnSignalAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchManagementCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManagement/DistributeCard")]
        void DistributeCard(string card);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManagement/DistributeTurnTime")]
        void DistributeTurnTime(int turnTime);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManagement/ReturnStartTurnSignal")]
        void ReturnStartTurnSignal();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchManagementChannel : PassThePen.PassThePenService.IMatchManagement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MatchManagementClient : System.ServiceModel.DuplexClientBase<PassThePen.PassThePenService.IMatchManagement>, PassThePen.PassThePenService.IMatchManagement {
        
        public MatchManagementClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MatchManagementClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MatchManagementClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchManagementClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchManagementClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendCard(string card) {
            base.Channel.SendCard(card);
        }
        
        public System.Threading.Tasks.Task SendCardAsync(string card) {
            return base.Channel.SendCardAsync(card);
        }
        
        public void SelectTurnTime() {
            base.Channel.SelectTurnTime();
        }
        
        public System.Threading.Tasks.Task SelectTurnTimeAsync() {
            return base.Channel.SelectTurnTimeAsync();
        }
        
        public void StartTurnSignal() {
            base.Channel.StartTurnSignal();
        }
        
        public System.Threading.Tasks.Task StartTurnSignalAsync() {
            return base.Channel.StartTurnSignalAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PassThePenService.IChatServices", CallbackContract=typeof(PassThePen.PassThePenService.IChatServicesCallback))]
    public interface IChatServices {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatServices/SendMessage")]
        void SendMessage(string senderUsername, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatServices/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string senderUsername, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServicesCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatServices/MessageSend")]
        void MessageSend(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServicesChannel : PassThePen.PassThePenService.IChatServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServicesClient : System.ServiceModel.DuplexClientBase<PassThePen.PassThePenService.IChatServices>, PassThePen.PassThePenService.IChatServices {
        
        public ChatServicesClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServicesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServicesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServicesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServicesClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendMessage(string senderUsername, string message) {
            base.Channel.SendMessage(senderUsername, message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string senderUsername, string message) {
            return base.Channel.SendMessageAsync(senderUsername, message);
        }
    }
}
